// <auto-generated />
using System;
using BlogSite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlogSite.Migrations
{
    [DbContext(typeof(BlogContext))]
    partial class BlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogSite.Data.Article", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleContent");

                    b.Property<Guid>("AuthorID");

                    b.Property<int>("CategoryID");

                    b.Property<int>("Likes");

                    b.Property<int>("MediaID");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("Summary");

                    b.Property<string>("Title");

                    b.Property<int>("Views");

                    b.Property<bool>("isActive");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("MediaID");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("BlogSite.Data.ArticleMedia", b =>
                {
                    b.Property<int>("ArticleID");

                    b.Property<int>("MediaID");

                    b.Property<int>("ID");

                    b.HasKey("ArticleID", "MediaID");

                    b.HasIndex("MediaID");

                    b.ToTable("ArticleMedias");
                });

            modelBuilder.Entity("BlogSite.Data.ArticleTag", b =>
                {
                    b.Property<int>("ArticleID");

                    b.Property<int>("TagID");

                    b.Property<int>("ID");

                    b.HasKey("ArticleID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("BlogSite.Data.Author", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MailAdress");

                    b.Property<int>("MediaID");

                    b.Property<string>("Name");

                    b.Property<string>("Nickname");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("Surname");

                    b.Property<bool>("isActive");

                    b.HasKey("ID");

                    b.HasIndex("MediaID");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("BlogSite.Data.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BlogSite.Data.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleID");

                    b.Property<string>("CommentContent");

                    b.Property<string>("Nickname");

                    b.Property<DateTime>("SubmitDate");

                    b.Property<string>("Title");

                    b.Property<bool>("isActive");

                    b.HasKey("ID");

                    b.HasIndex("ArticleID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("BlogSite.Data.Media", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LargePath");

                    b.Property<string>("MediumPath");

                    b.Property<string>("Name");

                    b.Property<string>("SmallPath");

                    b.Property<DateTime>("UploadDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("VideoPath");

                    b.HasKey("ID");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("BlogSite.Data.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("BlogSite.Data.Visitor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPAdress");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("ID");

                    b.ToTable("Visitor");
                });

            modelBuilder.Entity("BlogSite.Data.Article", b =>
                {
                    b.HasOne("BlogSite.Data.Author", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlogSite.Data.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlogSite.Data.Media", "Media")
                        .WithMany("Articles")
                        .HasForeignKey("MediaID")
                        .HasConstraintName("FK_Article_Media_MediaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlogSite.Data.ArticleMedia", b =>
                {
                    b.HasOne("BlogSite.Data.Article", "Article")
                        .WithMany("ArticleMedias")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlogSite.Data.Media", "Media")
                        .WithMany("ArticleMedias")
                        .HasForeignKey("MediaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlogSite.Data.ArticleTag", b =>
                {
                    b.HasOne("BlogSite.Data.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlogSite.Data.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlogSite.Data.Author", b =>
                {
                    b.HasOne("BlogSite.Data.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlogSite.Data.Comment", b =>
                {
                    b.HasOne("BlogSite.Data.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
